// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: notify/v1/notify.proto
//

import Connect
import Foundation
import SwiftProtobuf

public protocol Notify_V1_NotifyServiceClientInterface {

    func `fetchMessage`(headers: Connect.Headers, onResult: @escaping (Connect.StreamResult<Notify_V1_FetchMessageResponse>) -> Void) -> any Connect.ServerOnlyStreamInterface<Notify_V1_FetchMessageRequest>

    @available(iOS 13, *)
    func `fetchMessage`(headers: Connect.Headers) -> any Connect.ServerOnlyAsyncStreamInterface<Notify_V1_FetchMessageRequest, Notify_V1_FetchMessageResponse>
}

/// Concrete implementation of `Notify_V1_NotifyServiceClientInterface`.
public final class Notify_V1_NotifyServiceClient: Notify_V1_NotifyServiceClientInterface {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    public func `fetchMessage`(headers: Connect.Headers = [:], onResult: @escaping (Connect.StreamResult<Notify_V1_FetchMessageResponse>) -> Void) -> any Connect.ServerOnlyStreamInterface<Notify_V1_FetchMessageRequest> {
        return self.client.serverOnlyStream(path: "notify.v1.NotifyService/FetchMessage", headers: headers, onResult: onResult)
    }

    @available(iOS 13, *)
    public func `fetchMessage`(headers: Connect.Headers = [:]) -> any Connect.ServerOnlyAsyncStreamInterface<Notify_V1_FetchMessageRequest, Notify_V1_FetchMessageResponse> {
        return self.client.serverOnlyStream(path: "notify.v1.NotifyService/FetchMessage", headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let fetchMessage = Connect.MethodSpec(name: "FetchMessage", service: "notify.v1.NotifyService", type: .serverStream)
        }
    }
}
